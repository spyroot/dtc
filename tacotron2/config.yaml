train: True                 # train or not,  default is True for generation we only need load pre-trained model
#active: 'grid_small'       # dataset set generated.
use_dataset: 'LJSpeech'     # dataset set generated.
use_model: 'dts'            # model to use , it must be defined in models section.
draw_prediction: True       # at the of training draw.
load_model: True            # load model or not, and what
load_epoch: 500             # load model.  last epoch
save_model: True            # save model,
regenerate: True            # regenerated,  factor when indicated by epochs_save
active_setting: medium      # indicate what setting to use, so we can switch from debug to production
evaluate: True              # will run evaluation

root_dir: "."
log_dir: "logs"
nil_dir: "timing"
graph_dir: "graphs"
results_dir: "results"
timing_dir: "timing"
figures_dir: "figures"
prediction_dir: "prediction"                    # where we save prediction
model_save_dir: "model_save"                    # where we save model

datasets:
  LJSpeech:
    ds_type: "audio"
    dir: "/Users/spyroot/Dropbox/Datasets/LJSpeech-1.1"
    training_meta: ljs_audio_text_train_filelist.txt
    validation_meta:  ljs_audio_text_val_filelist.txt
    test_meta: ljs_audio_text_test_filelist.txt
    meta: metadata.csv
    recursive: False
    file_type: "wav"

settings:
  # debug mode
  debug:
    early_stopping: True
    epochs_log:  1000
    start_test:  10
    epochs_test: 10
    epochs_save: 10
    tensorboard_update: 10
  # baseline
  mini:
    # if we need enable early stopping
    early_stopping: True
    epochs_log: 1000
    start_test: 2
    epochs_test: 2
    epochs_save: 2
    tensorboard_update: 10
  # baseline
  baseline:
    early_stopping: True
    epochs_log:  1000
    start_test:  100
    epochs_test: 100
    epochs_save: 100
    tensorboard_update: 100
  # baseline
  medium:
    # tensorboard update rate
    tensorboard_update: 20
    # early stopping
    early_stopping: True
    # when to log
    epochs_log: 1000
    start_test: 20
    # when to start testing
    epochs_test: 20
    # when to save
    epochs_save: 20
    # fix seed
    seed: 1234
    #
    epochs: 500
    #
    iters_per_checkpoint: 1000
    #
    fp16_run: False
    #
    distributed: = False
    #
    backend: "nccl"
    url: "tcp://localhost:54321"
    #
    cudnn_enabled: True
    #
    cudnn_benchmark: False


# Model definition
models:
  # this pure model specific, single model can describe both edges and nodes
  # in case we need use single model for edge and node prediction task ,
  # use keyword single_model: model_name
  dts:
    transcoder:
      model: tacotron2
      optimizer: node_optimizer
      lr_scheduler: main_lr_scheduler
      has_input: True
      has_output: True
      max_wav_value: 32768.0
      sampling_rate: 22050
      filter_length: 1024
      hop_length: 256
      win_length: 1024
      n_mel_channels: 80
      mel_fmin: 0.0
      mel_fmax: 8000.0
    edge_model:
      model: GraphLSTM
      optimizer: edge_optimizer
      lr_scheduler: main_lr_scheduler
      input_size: 1
  GraphLstmRnn:
    node_model:
      model: GraphLSTM
      optimizer: node_optimizer
      lr_scheduler: main_lr_scheduler
      has_input: True
      has_output: True
    edge_model:
      model: GraphLSTM
      optimizer: edge_optimizer
      lr_scheduler: main_lr_scheduler
      input_size: 1